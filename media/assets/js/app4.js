// Generated by CoffeeScript 1.4.0
(function() {
  var $jQ, API_SUBMIT_PHOTO, API_URL, API_VERIFY_PHOTO, BancoGenital, DEBUG, GenitalPhotobooth, GenitaliaItem, HEIGHT, Overlay, PHOTO_TILING, SESSIONS, WIDTH, banco, menu, overlay, photobooth, session, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  API_URL = '/photos/json';

  API_SUBMIT_PHOTO = '/photos/upload';

  API_VERIFY_PHOTO = '/photos/verify';

  DEBUG = true;

  _ref = [window.innerWidth, window.innerHeight], WIDTH = _ref[0], HEIGHT = _ref[1];

  SESSIONS = ['startmessage', 'wall', 'mostraoteu', 'about'];

  _ref1 = [null, null, null, null], session = _ref1[0], overlay = _ref1[1], banco = _ref1[2], menu = _ref1[3];

  photobooth = void 0;

  PHOTO_TILING = 'sequential';

  GenitaliaItem = (function() {

    function GenitaliaItem(data, pos) {
      var _this = this;
      this.el = $jQ("<div id='" + data.id + "' attr-pos='" + pos[0] + "-" + pos[1] + "' class='wall-item'><img src='" + data.url_small + "'></div>");
      this.img = $jQ('img', this.el);
      this.el.hide();
      this.img.imagesLoaded(function() {
        return _this.el.fadeIn(1000);
      });
      this.getPos();
    }

    GenitaliaItem.prototype.getPos = function() {
      this.pos = this.el.offset();
      this.w = this.el.width();
      this.h = this.el.height();
      this.coords = {
        x1: this.pos.left,
        y1: this.pos.top,
        x2: this.pos.left + this.w,
        y2: this.pos.top + this.h,
        cx: this.pos.left + (this.w / 2),
        cy: this.pos.top + (this.h / 2)
      };
      return this.coords;
    };

    GenitaliaItem.prototype.setPos = function(pos) {
      return this.el.offset(pos.left, pos.top);
    };

    return GenitaliaItem;

  })();

  BancoGenital = (function() {

    function BancoGenital(viewport, size) {
      this.onResize = __bind(this.onResize, this);

      this.zoomOut = __bind(this.zoomOut, this);

      this.zoomIn = __bind(this.zoomIn, this);

      this.onPhotoClick = __bind(this.onPhotoClick, this);

      this.onMouseDragged = __bind(this.onMouseDragged, this);

      this.onMouseUp = __bind(this.onMouseUp, this);

      this.onMouseDown = __bind(this.onMouseDown, this);

      this.setup = __bind(this.setup, this);

      var _ref2;
      this.size = size;
      _ref2 = [this.size[0], this.size[1]], WIDTH = _ref2[0], HEIGHT = _ref2[1];
      this.tile_size = [150, 225];
      this.photoJSONList = [];
      this.inZoom = false;
      this.last_col = this.last_row = 0;
      this.container = $jQ(viewport);
      this.onResize();
    }

    BancoGenital.prototype.setup = function(photoList) {
      var page, _i, _results;
      this.photoJSONList = photoList;
      this.imgCounter = Math.floor(Math.random() * (this.photoJSONList.length - 1));
      $jQ(window).resize(this.onResize);
      _results = [];
      for (page = _i = 1; _i <= 2; page = ++_i) {
        _results.push(this.addPageOfPhoto());
      }
      return _results;
    };

    BancoGenital.prototype.addItem = function(item, row, col) {
      var it;
      it = new GenitaliaItem(item, [row, col]);
      return $jQ('#wall').append(it.el);
    };

    BancoGenital.prototype.addPageOfPhoto = function() {
      var c_col, c_row, _i, _j, _ref2, _ref3;
      for (c_row = _i = 1, _ref2 = this.rows; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; c_row = 1 <= _ref2 ? ++_i : --_i) {
        this.last_row = this.last_row + 1;
        this.last_col = 0;
        for (c_col = _j = 1, _ref3 = this.columns; 1 <= _ref3 ? _j <= _ref3 : _j >= _ref3; c_col = 1 <= _ref3 ? ++_j : --_j) {
          this.last_col = this.last_col + 1;
          this.addItem(this.getPhotoData);
        }
      }
      return $jQ('.wall-item').zoomTarget();
    };

    BancoGenital.prototype.getPhotoData = function(row, col) {
      var currPhoto;
      if (PHOTO_TILING === 'random') {
        this.imgCounter = Math.floor(Math.random() * this.photoJSONList.length);
      } else if (PHOTO_TILING === 'sequential') {
        this.imgCounter = (this.photoJSONList.length - 1 + this.imgCounter++) % this.photoJSONList.length;
      }
      currPhoto = this.photoJSONList[this.imgCounter];
      return currPhoto;
    };

    BancoGenital.prototype.onMouseDown = function(e) {
      if (this.inZoom) {
        e.stop();
      }
    };

    BancoGenital.prototype.onMouseUp = function(e) {
      return this.dragged = false;
    };

    BancoGenital.prototype.onMouseDragged = function(delta, e) {
      if (Math.abs(delta[0]) > 5 || Math.abs(delta[1]) > 5) {
        this.dragged = true;
      }
      if (this.inZoom) {
        return e.stop();
      }
    };

    BancoGenital.prototype.onPhotoClick = function(ev) {
      if (this.dragged) {
        return;
      }
      this.cTarget = $jQ(ev.target);
      if (!this.inZoom) {
        return this.zoomIn(this.cTarget);
      } else {
        if (this.cTarget.attr('src') === this.prevTarget.attr('src')) {
          return this.zoomOut();
        } else {
          return this.zoomIn(this.cTarget);
        }
      }
    };

    BancoGenital.prototype.zoomIn = function(photo_el) {
      this.prevTarget = this.cTarget;
      this.inZoom = true;
      $jQ(photo_el).attr('src', $jQ(photo_el).data('photo_info').url);
      return $jQ(photo_el).zoomTo({
        targetSize: 0.60,
        duration: 600
      });
    };

    BancoGenital.prototype.zoomOut = function() {
      this.inZoom = false;
      return $jQ('body').zoomTo({
        targetSize: 0.75,
        duration: 600
      });
    };

    BancoGenital.prototype.onResize = function() {
      var _ref2;
      _ref2 = [window.innerWidth, window.innerHeight], WIDTH = _ref2[0], HEIGHT = _ref2[1];
      $jQ(this.container).css({
        width: WIDTH,
        height: HEIGHT
      });
      $jQ('#wall').css({
        width: WIDTH,
        height: HEIGHT
      });
      $jQ('#overlay').css({
        width: WIDTH,
        height: HEIGHT
      });
      $jQ('.infoscreen').css({
        position: 'absolute',
        left: (WIDTH - $jQ('.infoscreen').outerWidth()) / 2,
        top: (HEIGHT - $jQ('.infoscreen').outerHeight()) / 2
      });
      this.columns = Math.ceil(WIDTH / this.tile_size[0]) - 1;
      this.rows = Math.ceil(HEIGHT / this.tile_size[1]) - 1;
      if (DEBUG) {
        return console.log("COLUMNS/ROWS: " + this.columns + " / " + this.rows);
      }
    };

    return BancoGenital;

  })();

  Overlay = (function() {

    function Overlay(el) {
      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);

      this.setPage = __bind(this.setPage, this);
      this.el = $jQ(el);
      this.pages = ['choose-upload', 'mostraoteu-upload', 'mostraoteu-photobooth'];
      this.el.css({
        width: WIDTH,
        height: HEIGHT
      });
      this.on = false;
    }

    Overlay.prototype.setPage = function(new_page) {
      if (this.cpage) {
        this.cpage.hide();
      }
      this.cpage = $jQ('#' + new_page);
      return session = new_page;
    };

    Overlay.prototype.show = function() {
      this.el.fadeIn('fast');
      this.cpage.show();
      return this.on = true;
    };

    Overlay.prototype.hide = function() {
      this.el.fadeOut('slow');
      this.on = false;
      return session = 'wall';
    };

    return Overlay;

  })();

  GenitalPhotobooth = (function() {

    function GenitalPhotobooth(el) {
      this.el = $jQ(el);
      this.options = {
        enableSound: true,
        enableFlash: true,
        enableSettingsButton: true,
        bandwidth: 0,
        contentType: "application/octet-stream",
        photoQuality: 100,
        photoWidth: 459,
        photoHeight: 344,
        cameraWidth: 640,
        cameraHeight: 480,
        cameraFPS: 25,
        timerTimeout: 3,
        timerX: 198,
        timerY: 250,
        timerAlpha: 0.6
      };
      swfobject.switchOffAutoHideShow();
      swfobject.registerObject("openbooth");
      this.openbooth = swfobject.getObjectById("openbooth");
      this.openbooth.init();
    }

    return GenitalPhotobooth;

  })();

  $.noConflict();

  $jQ = jQuery;

  $jQ(function() {
    var dragEnter, dragLeave, dropzone, photoSubmitError, photoSubmitSuccess,
      _this = this;
    overlay = new Overlay('#overlay');
    overlay.setPage('startmessage');
    overlay.hide();
    banco = new BancoGenital('#viewport', [window.innerWidth, window.innerHeight]);
    menu = $jQ('#menu');
    menu.show();
    $jQ.getJSON(API_URL, function(data) {
      return banco.setup(data);
    });
    $jQ('#enter-site').on('click', function(ev) {
      overlay.hide();
      return menu.show();
    });
    $jQ('#menu-mostraoteu').on('click', function(ev) {
      if (session === 'choose-upload') {
        overlay.hide();
      } else {
        overlay.setPage('choose-upload');
        overlay.show();
      }
      ev.stopPropagation();
      return false;
    });
    $jQ('#bt-cancel-photo').on('click', function(ev) {
      overlay.hide();
      ev.stopPropagation();
      return false;
    });
    $jQ('#simple-upload').on('click', function(ev) {
      overlay.setPage('mostraoteu-upload');
      overlay.show();
      ev.stopPropagation();
      return false;
    });
    $jQ('#simple-phototaker').on('click', function(ev) {
      overlay.setPage('mostraoteu-photobooth');
      overlay.show();
      photobooth = photobooth || new GenitalPhotobooth('#mostraoteu-photobooth');
      photobooth.start();
      ev.stopPropagation();
      return false;
    });
    $jQ('#photo-submit').dropzone({
      url: API_VERIFY_PHOTO,
      paramName: 'photo',
      createImageThumbnails: true,
      thumbnailWidth: 300,
      thumbnailHeight: 450,
      previewTemplate: "",
      parallelUploads: 1
    });
    dropzone = $jQ('#photo-submit').data('dropzone');
    dragEnter = function(ev) {
      return $jQ('#photo-submit').addClass('drag');
    };
    dragLeave = function(ev) {
      return $jQ('#photo-submit').removeClass('drag');
    };
    dropzone.on("dragenter", dragEnter);
    dropzone.on("dragleave", dragLeave);
    dropzone.on("drop", dragLeave);
    dropzone.on("thumbnail", function(file, dataUrl) {
      var img;
      $jQ('div', '#photo-submit').remove();
      img = new Image;
      img.src = dataUrl;
      if (($jQ('img', '#photo-submit').length)) {
        return $jQ('img', '#photo-submit').attr({
          'src': dataUrl
        });
      } else {
        return $jQ('#photo-submit').append(img);
      }
    });
    photoSubmitSuccess = function(data) {
      console.log(data);
      return overlay.hide();
    };
    photoSubmitError = function(data) {
      return console.log(data);
    };
    $jQ('#bt-submit-photo').on('click', function(ev) {
      var file, files, photo, xhr;
      files = $jQ('#photo-submit').data('dropzone').files;
      file = files[files.length - 1];
      photo = new FormData();
      photo.append('photo', file);
      xhr = new XMLHttpRequest();
      xhr.open('POST', API_SUBMIT_PHOTO, true);
      xhr.onload = function(e) {
        var response;
        response = xhr.responseText;
        if (xhr.getResponseHeader("content-type").indexOf("application/json")) {
          response = JSON.parse(response);
        }
        if ((response['status'] === 'OK')(photoSubmitSuccess(response))) {

        } else {
          return photoSubmitError(response);
        }
      };
      xhr.setRequestHeader("Accept", "application/json");
      xhr.setRequestHeader("Cache-Control", "no-cache");
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhr.setRequestHeader("X-File-Name", file.name);
      xhr.send(photo);
      return false;
    });
    window.overlay = overlay;
    window.banco = banco;
    window.menu = menu;
    window.session = session;
    return window.$jQ = $jQ;
  });

  
// Grayscale w canvas method
	function grayscale(src){
		var canvas = document.createElement('canvas');
		var ctx = canvas.getContext('2d');
		var imgObj = new Image();
		imgObj.src = src;
		canvas.width = imgObj.width;
		canvas.height = imgObj.height; 
		ctx.drawImage(imgObj, 0, 0); 
		var imgPixels = ctx.getImageData(0, 0, canvas.width, canvas.height);
		for(var y = 0; y < imgPixels.height; y++){
			for(var x = 0; x < imgPixels.width; x++){
				var i = (y * 4) * imgPixels.width + x * 4;
				var avg = (imgPixels.data[i] + imgPixels.data[i + 1] + imgPixels.data[i + 2]) / 3;
				imgPixels.data[i] = avg; 
				imgPixels.data[i + 1] = avg; 
				imgPixels.data[i + 2] = avg;
			}
		}
		ctx.putImageData(imgPixels, 0, 0, 0, 0, imgPixels.width, imgPixels.height);
		return canvas.toDataURL();
    }
;


}).call(this);
